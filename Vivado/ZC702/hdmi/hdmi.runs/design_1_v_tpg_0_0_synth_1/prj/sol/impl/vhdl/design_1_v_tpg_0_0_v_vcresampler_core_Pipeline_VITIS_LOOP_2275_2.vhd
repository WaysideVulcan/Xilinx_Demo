-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_tpg_0_0_v_vcresampler_core_Pipeline_VITIS_LOOP_2275_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_out_hresampled_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_out_hresampled_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_out_hresampled_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_out_hresampled_empty_n : IN STD_LOGIC;
    stream_out_hresampled_read : OUT STD_LOGIC;
    stream_out_vresampled_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_vresampled_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_out_vresampled_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_out_vresampled_full_n : IN STD_LOGIC;
    stream_out_vresampled_write : OUT STD_LOGIC;
    loopWidth : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp33_i : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp107_i : IN STD_LOGIC_VECTOR (0 downto 0);
    linebuf_c_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    linebuf_c_1_ce0 : OUT STD_LOGIC;
    linebuf_c_1_we0 : OUT STD_LOGIC;
    linebuf_c_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    linebuf_c_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    linebuf_c_1_ce1 : OUT STD_LOGIC;
    linebuf_c_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    empty_40 : IN STD_LOGIC_VECTOR (0 downto 0);
    empty : IN STD_LOGIC_VECTOR (0 downto 0);
    linebuf_y_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    linebuf_y_ce0 : OUT STD_LOGIC;
    linebuf_y_we0 : OUT STD_LOGIC;
    linebuf_y_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    linebuf_y_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    linebuf_c_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    linebuf_c_ce0 : OUT STD_LOGIC;
    linebuf_c_we0 : OUT STD_LOGIC;
    linebuf_c_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    linebuf_c_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    linebuf_c_ce1 : OUT STD_LOGIC;
    linebuf_c_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_0_0324492_i_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    p_0_0324492_i_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_0_0324492_i_out_o_ap_vld : OUT STD_LOGIC;
    p_0_0335490_i_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    p_0_0335490_i_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_0_0335490_i_out_o_ap_vld : OUT STD_LOGIC;
    pix_0_2_0_0_0_load488_i_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    pix_0_2_0_0_0_load488_i_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    pix_0_2_0_0_0_load488_i_out_o_ap_vld : OUT STD_LOGIC;
    pix_0_1_0_0_0_load486_i_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    pix_0_1_0_0_0_load486_i_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    pix_0_1_0_0_0_load486_i_out_o_ap_vld : OUT STD_LOGIC;
    pix_0_0_0_0_0_load484_i_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    pix_0_0_0_0_0_load484_i_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    pix_0_0_0_0_0_load484_i_out_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of design_1_v_tpg_0_0_v_vcresampler_core_Pipeline_VITIS_LOOP_2275_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln2275_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal stream_out_vresampled_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_out_hresampled_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_reg_441 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_reg_441_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal x_reg_441_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal idxprom6_i261_i_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom6_i261_i_reg_450 : STD_LOGIC_VECTOR (63 downto 0);
    signal linebuf_c_addr_reg_456 : STD_LOGIC_VECTOR (11 downto 0);
    signal linebuf_c_addr_reg_456_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal linebuf_y_addr_reg_462 : STD_LOGIC_VECTOR (11 downto 0);
    signal LineBufVal_1_reg_472 : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBufVal_1_reg_472_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2287_fu_241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2287_reg_479 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2287_2_reg_484 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2287_3_reg_490 : STD_LOGIC_VECTOR (7 downto 0);
    signal LineBufVal_2_reg_495 : STD_LOGIC_VECTOR (7 downto 0);
    signal PixBufVal_fu_307_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal PixBufVal_reg_500 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2416_1_fu_317_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln2416_1_reg_505 : STD_LOGIC_VECTOR (8 downto 0);
    signal LineBufVal_reg_510 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_0_0_0_0_0_load_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_0_1_0_0_0_load_reg_525 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_0_2_0_0_0_load_reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2275_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_x_fu_96 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal add_ln2275_fu_221_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln2275_1_fu_211_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_75_fu_227_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln2356_fu_301_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2416_2_fu_313_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_327_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln2416_1_fu_337_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln2416_fu_334_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln2416_3_fu_347_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2416_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln2416_2_fu_350_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_74_fu_378_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_391_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln2444_1_i_fu_384_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln2444_fu_398_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_28 : BOOLEAN;
    signal ap_enable_state1_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_35 : BOOLEAN;
    signal ap_enable_state2_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_45 : BOOLEAN;
    signal ap_enable_state3_pp0_iter2_stage0 : BOOLEAN;
    signal ap_predicate_op36_load_state2 : BOOLEAN;
    signal ap_enable_operation_36 : BOOLEAN;
    signal ap_predicate_op44_load_state3 : BOOLEAN;
    signal ap_enable_operation_44 : BOOLEAN;
    signal ap_enable_operation_62 : BOOLEAN;
    signal ap_enable_state4_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_54 : BOOLEAN;
    signal ap_enable_operation_43 : BOOLEAN;
    signal ap_enable_operation_60 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_tpg_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component design_1_v_tpg_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    out_x_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln2275_fu_215_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1))) then 
                    out_x_fu_96 <= add_ln2275_fu_221_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    out_x_fu_96 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                LineBufVal_1_reg_472 <= linebuf_c_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                LineBufVal_1_reg_472_pp0_iter2_reg <= LineBufVal_1_reg_472;
                PixBufVal_reg_500 <= PixBufVal_fu_307_p3;
                add_ln2416_1_reg_505 <= add_ln2416_1_fu_317_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                pix_0_0_0_0_0_load_reg_520 <= pix_0_0_0_0_0_load484_i_out_i;
                pix_0_1_0_0_0_load_reg_525 <= pix_0_1_0_0_0_load486_i_out_i;
                pix_0_2_0_0_0_load_reg_530 <= pix_0_2_0_0_0_load488_i_out_i;
                trunc_ln_reg_515 <= add_ln2416_2_fu_350_p2(9 downto 2);
                x_reg_441_pp0_iter2_reg <= x_reg_441_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                LineBufVal_2_reg_495 <= linebuf_c_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                LineBufVal_reg_510 <= linebuf_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    idxprom6_i261_i_reg_450(11 downto 0) <= idxprom6_i261_i_fu_231_p1(11 downto 0);
                linebuf_c_addr_reg_456 <= idxprom6_i261_i_fu_231_p1(12 - 1 downto 0);
                linebuf_c_addr_reg_456_pp0_iter1_reg <= linebuf_c_addr_reg_456;
                linebuf_y_addr_reg_462 <= idxprom6_i261_i_reg_450(12 - 1 downto 0);
                trunc_ln2287_2_reg_484 <= stream_out_hresampled_dout(15 downto 8);
                trunc_ln2287_3_reg_490 <= stream_out_hresampled_dout(23 downto 16);
                trunc_ln2287_reg_479 <= trunc_ln2287_fu_241_p1;
                x_reg_441 <= ap_sig_allocacmp_x;
                x_reg_441_pp0_iter1_reg <= x_reg_441;
            end if;
        end if;
    end process;
    idxprom6_i261_i_reg_450(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    PixBufVal_fu_307_p3 <= 
        LineBufVal_1_reg_472 when (cmp107_i(0) = '1') else 
        select_ln2356_fu_301_p3;
    add_ln2275_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x) + unsigned(ap_const_lv15_1));
    add_ln2416_1_fu_317_p2 <= std_logic_vector(unsigned(zext_ln2416_2_fu_313_p1) + unsigned(ap_const_lv9_2));
    add_ln2416_2_fu_350_p2 <= std_logic_vector(unsigned(zext_ln2416_3_fu_347_p1) + unsigned(add_ln2416_fu_341_p2));
    add_ln2416_fu_341_p2 <= std_logic_vector(unsigned(zext_ln2416_1_fu_337_p1) + unsigned(zext_ln2416_fu_334_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_state2_pp0_stage0_iter1, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_state2_pp0_stage0_iter1, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_state2_pp0_stage0_iter1, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(stream_out_hresampled_empty_n, cmp33_i)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((cmp33_i = ap_const_lv1_1) and (stream_out_hresampled_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(stream_out_vresampled_full_n, empty)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((empty = ap_const_lv1_0) and (stream_out_vresampled_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln2275_fu_215_p2, ap_start_int)
    begin
        if (((icmp_ln2275_fu_215_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_28_assign_proc : process(icmp_ln2275_fu_215_p2)
    begin
                ap_enable_operation_28 <= (icmp_ln2275_fu_215_p2 = ap_const_lv1_1);
    end process;

        ap_enable_operation_35 <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_enable_operation_36_assign_proc : process(ap_predicate_op36_load_state2)
    begin
                ap_enable_operation_36 <= (ap_predicate_op36_load_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_43_assign_proc : process(p_read)
    begin
                ap_enable_operation_43 <= (p_read = ap_const_lv1_0);
    end process;


    ap_enable_operation_44_assign_proc : process(ap_predicate_op44_load_state3)
    begin
                ap_enable_operation_44 <= (ap_predicate_op44_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_45_assign_proc : process(cmp33_i)
    begin
                ap_enable_operation_45 <= (cmp33_i = ap_const_lv1_1);
    end process;

        ap_enable_operation_54 <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_enable_operation_60_assign_proc : process(p_read)
    begin
                ap_enable_operation_60 <= (p_read = ap_const_lv1_0);
    end process;

        ap_enable_operation_62 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state1_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_start_int)
    begin
                ap_enable_state1_pp0_iter0_stage0 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state2_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state2_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state3_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state3_pp0_iter2_stage0 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state4_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state4_pp0_iter3_stage0 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op36_load_state2_assign_proc : process(p_read, empty_40)
    begin
                ap_predicate_op36_load_state2 <= ((p_read = ap_const_lv1_0) and (empty_40 = ap_const_lv1_0));
    end process;


    ap_predicate_op44_load_state3_assign_proc : process(p_read, empty_40)
    begin
                ap_predicate_op44_load_state3 <= ((p_read = ap_const_lv1_0) and (empty_40 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, out_x_fu_96, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_x <= out_x_fu_96;
        end if; 
    end process;

    empty_74_fu_378_p3 <= 
        ap_const_lv8_0 when (empty_40(0) = '1') else 
        trunc_ln_reg_515;
    empty_75_fu_227_p1 <= ap_sig_allocacmp_x(12 - 1 downto 0);
    icmp_ln2275_fu_215_p2 <= "1" when (signed(zext_ln2275_1_fu_211_p1) < signed(loopWidth)) else "0";
    idxprom6_i261_i_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_75_fu_227_p1),64));
    linebuf_c_1_address0 <= zext_ln2275_fu_323_p1(12 - 1 downto 0);
    linebuf_c_1_address1 <= idxprom6_i261_i_reg_450(12 - 1 downto 0);

    linebuf_c_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            linebuf_c_1_ce0 <= ap_const_logic_1;
        else 
            linebuf_c_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_c_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_c_1_ce1 <= ap_const_logic_1;
        else 
            linebuf_c_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_c_1_d0 <= PixBufVal_reg_500;

    linebuf_c_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            linebuf_c_1_we0 <= ap_const_logic_1;
        else 
            linebuf_c_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_c_address0 <= linebuf_c_addr_reg_456_pp0_iter1_reg;
    linebuf_c_address1 <= idxprom6_i261_i_fu_231_p1(12 - 1 downto 0);

    linebuf_c_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuf_c_ce0 <= ap_const_logic_1;
        else 
            linebuf_c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_c_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_c_ce1 <= ap_const_logic_1;
        else 
            linebuf_c_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_c_d0 <= trunc_ln2287_2_reg_484;

    linebuf_c_we0_assign_proc : process(ap_enable_reg_pp0_iter2, cmp33_i, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuf_c_we0 <= ap_const_logic_1;
        else 
            linebuf_c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_y_address0 <= linebuf_y_addr_reg_462;

    linebuf_y_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuf_y_ce0 <= ap_const_logic_1;
        else 
            linebuf_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_y_d0 <= p_0_0335490_i_out_i;

    linebuf_y_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            linebuf_y_we0 <= ap_const_logic_1;
        else 
            linebuf_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln2444_1_i_fu_384_p4 <= ((pix_0_2_0_0_0_load_reg_530 & pix_0_1_0_0_0_load_reg_525) & pix_0_0_0_0_0_load_reg_520);

    p_0_0324492_i_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, stream_out_hresampled_dout, cmp33_i, p_0_0324492_i_out_i, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0324492_i_out_o <= stream_out_hresampled_dout(15 downto 8);
        else 
            p_0_0324492_i_out_o <= p_0_0324492_i_out_i;
        end if; 
    end process;


    p_0_0324492_i_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, cmp33_i, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0324492_i_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_0324492_i_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_0_0335490_i_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, cmp33_i, p_0_0335490_i_out_i, ap_block_pp0_stage0, trunc_ln2287_fu_241_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0335490_i_out_o <= trunc_ln2287_fu_241_p1;
        else 
            p_0_0335490_i_out_o <= p_0_0335490_i_out_i;
        end if; 
    end process;


    p_0_0335490_i_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, cmp33_i, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_0_0335490_i_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_0335490_i_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pix_0_0_0_0_0_load484_i_out_o_assign_proc : process(ap_enable_reg_pp0_iter2, cmp33_i, pix_0_0_0_0_0_load484_i_out_i, ap_block_pp0_stage0, trunc_ln2287_reg_479)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pix_0_0_0_0_0_load484_i_out_o <= trunc_ln2287_reg_479;
        else 
            pix_0_0_0_0_0_load484_i_out_o <= pix_0_0_0_0_0_load484_i_out_i;
        end if; 
    end process;


    pix_0_0_0_0_0_load484_i_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, cmp33_i, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pix_0_0_0_0_0_load484_i_out_o_ap_vld <= ap_const_logic_1;
        else 
            pix_0_0_0_0_0_load484_i_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pix_0_1_0_0_0_load486_i_out_o_assign_proc : process(ap_enable_reg_pp0_iter2, cmp33_i, pix_0_1_0_0_0_load486_i_out_i, ap_block_pp0_stage0, trunc_ln2287_2_reg_484)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pix_0_1_0_0_0_load486_i_out_o <= trunc_ln2287_2_reg_484;
        else 
            pix_0_1_0_0_0_load486_i_out_o <= pix_0_1_0_0_0_load486_i_out_i;
        end if; 
    end process;


    pix_0_1_0_0_0_load486_i_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, cmp33_i, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pix_0_1_0_0_0_load486_i_out_o_ap_vld <= ap_const_logic_1;
        else 
            pix_0_1_0_0_0_load486_i_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    pix_0_2_0_0_0_load488_i_out_o_assign_proc : process(ap_enable_reg_pp0_iter2, cmp33_i, pix_0_2_0_0_0_load488_i_out_i, ap_block_pp0_stage0, trunc_ln2287_3_reg_490)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pix_0_2_0_0_0_load488_i_out_o <= trunc_ln2287_3_reg_490;
        else 
            pix_0_2_0_0_0_load488_i_out_o <= pix_0_2_0_0_0_load488_i_out_i;
        end if; 
    end process;


    pix_0_2_0_0_0_load488_i_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, cmp33_i, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pix_0_2_0_0_0_load488_i_out_o_ap_vld <= ap_const_logic_1;
        else 
            pix_0_2_0_0_0_load488_i_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln2356_fu_301_p3 <= 
        p_0_0324492_i_out_i when (cmp33_i(0) = '1') else 
        LineBufVal_1_reg_472;
    shl_ln_fu_327_p3 <= (LineBufVal_1_reg_472_pp0_iter2_reg & ap_const_lv1_0);

    stream_out_hresampled_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, stream_out_hresampled_empty_n, cmp33_i, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_out_hresampled_blk_n <= stream_out_hresampled_empty_n;
        else 
            stream_out_hresampled_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_out_hresampled_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, cmp33_i, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (cmp33_i = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_out_hresampled_read <= ap_const_logic_1;
        else 
            stream_out_hresampled_read <= ap_const_logic_0;
        end if; 
    end process;


    stream_out_vresampled_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, stream_out_vresampled_full_n, empty, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (empty = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            stream_out_vresampled_blk_n <= stream_out_vresampled_full_n;
        else 
            stream_out_vresampled_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_vresampled_din <= 
        or_ln2444_1_i_fu_384_p4 when (p_read(0) = '1') else 
        zext_ln2444_fu_398_p1;

    stream_out_vresampled_write_assign_proc : process(ap_enable_reg_pp0_iter4, empty, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            stream_out_vresampled_write <= ap_const_logic_1;
        else 
            stream_out_vresampled_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_fu_391_p3 <= (empty_74_fu_378_p3 & LineBufVal_reg_510);
    trunc_ln2287_fu_241_p1 <= stream_out_hresampled_dout(8 - 1 downto 0);
    zext_ln2275_1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x),16));
    zext_ln2275_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_441_pp0_iter2_reg),64));
    zext_ln2416_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_327_p3),10));
    zext_ln2416_2_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln2356_fu_301_p3),9));
    zext_ln2416_3_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2416_1_reg_505),10));
    zext_ln2416_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(LineBufVal_2_reg_495),10));
    zext_ln2444_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_fu_391_p3),24));
end behav;
