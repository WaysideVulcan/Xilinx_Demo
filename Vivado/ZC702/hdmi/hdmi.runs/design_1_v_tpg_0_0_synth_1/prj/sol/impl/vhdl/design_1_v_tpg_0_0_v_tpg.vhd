-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_tpg_0_0_v_tpg is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    fid_in : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    fid : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of design_1_v_tpg_0_0_v_tpg is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "design_1_v_tpg_0_0_v_tpg,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=6.734000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.209000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=19,HLS_SYN_DSP=0,HLS_SYN_FF=9691,HLS_SYN_LUT=10445,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal field_id : STD_LOGIC_VECTOR (15 downto 0);
    signal bckgndId : STD_LOGIC_VECTOR (7 downto 0);
    signal ovrlayId : STD_LOGIC_VECTOR (7 downto 0);
    signal maskId : STD_LOGIC_VECTOR (7 downto 0);
    signal motionSpeed : STD_LOGIC_VECTOR (7 downto 0);
    signal colorFormat : STD_LOGIC_VECTOR (7 downto 0);
    signal crossHairX : STD_LOGIC_VECTOR (15 downto 0);
    signal crossHairY : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateHorContStart : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateHorContDelta : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateVerContStart : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateVerContDelta : STD_LOGIC_VECTOR (15 downto 0);
    signal boxSize : STD_LOGIC_VECTOR (15 downto 0);
    signal boxColorR : STD_LOGIC_VECTOR (15 downto 0);
    signal boxColorG : STD_LOGIC_VECTOR (15 downto 0);
    signal boxColorB : STD_LOGIC_VECTOR (15 downto 0);
    signal dpDynamicRange : STD_LOGIC_VECTOR (7 downto 0);
    signal dpYUVCoef : STD_LOGIC_VECTOR (7 downto 0);
    signal bck_motion_en : STD_LOGIC_VECTOR (15 downto 0);
    signal count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal icmp_ln500_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln500_reg_656 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln502_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln502_reg_660 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_read_reg_669 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal width_read_reg_674 : STD_LOGIC_VECTOR (15 downto 0);
    signal field_id_read_reg_679 : STD_LOGIC_VECTOR (15 downto 0);
    signal bckgndId_read_reg_689 : STD_LOGIC_VECTOR (7 downto 0);
    signal ovrlayId_read_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal maskId_read_reg_699 : STD_LOGIC_VECTOR (7 downto 0);
    signal motionSpeed_read_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorFormat_read_reg_709 : STD_LOGIC_VECTOR (7 downto 0);
    signal crossHairX_read_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal crossHairY_read_reg_719 : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateHorContStart_read_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateHorContDelta_read_reg_729 : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateVerContStart_read_reg_734 : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateVerContDelta_read_reg_739 : STD_LOGIC_VECTOR (15 downto 0);
    signal boxSize_read_reg_744 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_641_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_103_fu_646_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_103_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_104_fu_651_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_104_reg_759 : STD_LOGIC_VECTOR (7 downto 0);
    signal dpYUVCoef_read_reg_764 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_fid : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_ap_start : STD_LOGIC;
    signal grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID : STD_LOGIC;
    signal grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TREADY : STD_LOGIC;
    signal grp_v_tpgHlsDataFlow_fu_405_fid_ap_vld : STD_LOGIC;
    signal grp_v_tpgHlsDataFlow_fu_405_ap_done : STD_LOGIC;
    signal grp_v_tpgHlsDataFlow_fu_405_ap_ready : STD_LOGIC;
    signal grp_v_tpgHlsDataFlow_fu_405_ap_idle : STD_LOGIC;
    signal grp_v_tpgHlsDataFlow_fu_405_ap_continue : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_568_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal count_new_0_reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln503_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_v_tpgHlsDataFlow_fu_405_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_sync_grp_v_tpgHlsDataFlow_fu_405_ap_ready : STD_LOGIC;
    signal ap_sync_grp_v_tpgHlsDataFlow_fu_405_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_done : STD_LOGIC := '0';
    signal select_ln505_fu_621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_599_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln505_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln507_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal regslice_both_m_axis_video_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal m_axis_video_TVALID_int_regslice : STD_LOGIC;
    signal m_axis_video_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_m_axis_video_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_video_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_tpg_0_0_v_tpgHlsDataFlow IS
    port (
        height_val7 : IN STD_LOGIC_VECTOR (15 downto 0);
        width_val12 : IN STD_LOGIC_VECTOR (15 downto 0);
        field_id_val13 : IN STD_LOGIC_VECTOR (15 downto 0);
        fid_in_val14 : IN STD_LOGIC_VECTOR (0 downto 0);
        bckgndId_val15 : IN STD_LOGIC_VECTOR (7 downto 0);
        ovrlayId_val16 : IN STD_LOGIC_VECTOR (7 downto 0);
        maskId_val17 : IN STD_LOGIC_VECTOR (7 downto 0);
        motionSpeed_val19 : IN STD_LOGIC_VECTOR (7 downto 0);
        colorFormat_val : IN STD_LOGIC_VECTOR (7 downto 0);
        crossHairX_val22 : IN STD_LOGIC_VECTOR (15 downto 0);
        crossHairY_val23 : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateHorContStart_val24 : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateHorContDelta_val25 : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContStart_val26 : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContDelta_val27 : IN STD_LOGIC_VECTOR (15 downto 0);
        boxSize_val28 : IN STD_LOGIC_VECTOR (15 downto 0);
        boxColorR_val29 : IN STD_LOGIC_VECTOR (7 downto 0);
        boxColorG_val30 : IN STD_LOGIC_VECTOR (7 downto 0);
        boxColorB_val31 : IN STD_LOGIC_VECTOR (7 downto 0);
        dpYUVCoef_val32 : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        fid : OUT STD_LOGIC_VECTOR (0 downto 0);
        s : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        field_id_val13_ap_vld : IN STD_LOGIC;
        fid_in_val14_ap_vld : IN STD_LOGIC;
        ovrlayId_val16_ap_vld : IN STD_LOGIC;
        maskId_val17_ap_vld : IN STD_LOGIC;
        colorFormat_val_ap_vld : IN STD_LOGIC;
        crossHairX_val22_ap_vld : IN STD_LOGIC;
        crossHairY_val23_ap_vld : IN STD_LOGIC;
        boxSize_val28_ap_vld : IN STD_LOGIC;
        boxColorR_val29_ap_vld : IN STD_LOGIC;
        boxColorG_val30_ap_vld : IN STD_LOGIC;
        boxColorB_val31_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        height_val7_ap_vld : IN STD_LOGIC;
        width_val12_ap_vld : IN STD_LOGIC;
        bckgndId_val15_ap_vld : IN STD_LOGIC;
        ZplateHorContStart_val24_ap_vld : IN STD_LOGIC;
        ZplateHorContDelta_val25_ap_vld : IN STD_LOGIC;
        ZplateVerContStart_val26_ap_vld : IN STD_LOGIC;
        ZplateVerContDelta_val27_ap_vld : IN STD_LOGIC;
        dpYUVCoef_val32_ap_vld : IN STD_LOGIC;
        motionSpeed_val19_ap_vld : IN STD_LOGIC;
        s_ap_vld : IN STD_LOGIC;
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        fid_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component design_1_v_tpg_0_0_reg_unsigned_short_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        d : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component design_1_v_tpg_0_0_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        width : OUT STD_LOGIC_VECTOR (15 downto 0);
        bckgndId : OUT STD_LOGIC_VECTOR (7 downto 0);
        ovrlayId : OUT STD_LOGIC_VECTOR (7 downto 0);
        maskId : OUT STD_LOGIC_VECTOR (7 downto 0);
        motionSpeed : OUT STD_LOGIC_VECTOR (7 downto 0);
        colorFormat : OUT STD_LOGIC_VECTOR (7 downto 0);
        crossHairX : OUT STD_LOGIC_VECTOR (15 downto 0);
        crossHairY : OUT STD_LOGIC_VECTOR (15 downto 0);
        ZplateHorContStart : OUT STD_LOGIC_VECTOR (15 downto 0);
        ZplateHorContDelta : OUT STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContStart : OUT STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContDelta : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxSize : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxColorR : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxColorG : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxColorB : OUT STD_LOGIC_VECTOR (15 downto 0);
        dpDynamicRange : OUT STD_LOGIC_VECTOR (7 downto 0);
        dpYUVCoef : OUT STD_LOGIC_VECTOR (7 downto 0);
        field_id : OUT STD_LOGIC_VECTOR (15 downto 0);
        bck_motion_en : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component design_1_v_tpg_0_0_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_v_tpgHlsDataFlow_fu_405 : component design_1_v_tpg_0_0_v_tpgHlsDataFlow
    port map (
        height_val7 => height_read_reg_669,
        width_val12 => width_read_reg_674,
        field_id_val13 => field_id_read_reg_679,
        fid_in_val14 => fid_in,
        bckgndId_val15 => bckgndId_read_reg_689,
        ovrlayId_val16 => ovrlayId_read_reg_694,
        maskId_val17 => maskId_read_reg_699,
        motionSpeed_val19 => motionSpeed_read_reg_704,
        colorFormat_val => colorFormat_read_reg_709,
        crossHairX_val22 => crossHairX_read_reg_714,
        crossHairY_val23 => crossHairY_read_reg_719,
        ZplateHorContStart_val24 => ZplateHorContStart_read_reg_724,
        ZplateHorContDelta_val25 => ZplateHorContDelta_read_reg_729,
        ZplateVerContStart_val26 => ZplateVerContStart_read_reg_734,
        ZplateVerContDelta_val27 => ZplateVerContDelta_read_reg_739,
        boxSize_val28 => boxSize_read_reg_744,
        boxColorR_val29 => empty_reg_749,
        boxColorG_val30 => empty_103_reg_754,
        boxColorB_val31 => empty_104_reg_759,
        dpYUVCoef_val32 => dpYUVCoef_read_reg_764,
        m_axis_video_TDATA => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TDATA,
        m_axis_video_TKEEP => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TKEEP,
        m_axis_video_TSTRB => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TSTRB,
        m_axis_video_TUSER => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TUSER,
        m_axis_video_TLAST => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TLAST,
        m_axis_video_TID => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TID,
        m_axis_video_TDEST => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TDEST,
        fid => grp_v_tpgHlsDataFlow_fu_405_fid,
        s => s,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        field_id_val13_ap_vld => ap_const_logic_1,
        fid_in_val14_ap_vld => ap_const_logic_1,
        ovrlayId_val16_ap_vld => ap_const_logic_1,
        maskId_val17_ap_vld => ap_const_logic_1,
        colorFormat_val_ap_vld => ap_const_logic_1,
        crossHairX_val22_ap_vld => ap_const_logic_1,
        crossHairY_val23_ap_vld => ap_const_logic_1,
        boxSize_val28_ap_vld => ap_const_logic_1,
        boxColorR_val29_ap_vld => ap_const_logic_1,
        boxColorG_val30_ap_vld => ap_const_logic_1,
        boxColorB_val31_ap_vld => ap_const_logic_1,
        ap_start => grp_v_tpgHlsDataFlow_fu_405_ap_start,
        height_val7_ap_vld => ap_const_logic_1,
        width_val12_ap_vld => ap_const_logic_1,
        bckgndId_val15_ap_vld => ap_const_logic_1,
        ZplateHorContStart_val24_ap_vld => ap_const_logic_1,
        ZplateHorContDelta_val25_ap_vld => ap_const_logic_1,
        ZplateVerContStart_val26_ap_vld => ap_const_logic_1,
        ZplateVerContDelta_val27_ap_vld => ap_const_logic_1,
        dpYUVCoef_val32_ap_vld => ap_const_logic_1,
        motionSpeed_val19_ap_vld => ap_const_logic_1,
        s_ap_vld => ap_const_logic_1,
        m_axis_video_TVALID => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID,
        m_axis_video_TREADY => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TREADY,
        fid_ap_vld => grp_v_tpgHlsDataFlow_fu_405_fid_ap_vld,
        ap_done => grp_v_tpgHlsDataFlow_fu_405_ap_done,
        ap_ready => grp_v_tpgHlsDataFlow_fu_405_ap_ready,
        ap_idle => grp_v_tpgHlsDataFlow_fu_405_ap_idle,
        ap_continue => grp_v_tpgHlsDataFlow_fu_405_ap_continue);

    grp_reg_unsigned_short_s_fu_568 : component design_1_v_tpg_0_0_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        d => bck_motion_en,
        ap_return => grp_reg_unsigned_short_s_fu_568_ap_return);

    CTRL_s_axi_U : component design_1_v_tpg_0_0_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        height => height,
        width => width,
        bckgndId => bckgndId,
        ovrlayId => ovrlayId,
        maskId => maskId,
        motionSpeed => motionSpeed,
        colorFormat => colorFormat,
        crossHairX => crossHairX,
        crossHairY => crossHairY,
        ZplateHorContStart => ZplateHorContStart,
        ZplateHorContDelta => ZplateHorContDelta,
        ZplateVerContStart => ZplateVerContStart,
        ZplateVerContDelta => ZplateVerContDelta,
        boxSize => boxSize,
        boxColorR => boxColorR,
        boxColorG => boxColorG,
        boxColorB => boxColorB,
        dpDynamicRange => dpDynamicRange,
        dpYUVCoef => dpYUVCoef,
        field_id => field_id,
        bck_motion_en => bck_motion_en,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_m_axis_video_V_data_V_U : component design_1_v_tpg_0_0_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TDATA,
        vld_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID,
        ack_in => m_axis_video_TREADY_int_regslice,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_m_axis_video_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_data_V_U_apdone_blk);

    regslice_both_m_axis_video_V_keep_V_U : component design_1_v_tpg_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TKEEP,
        vld_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_m_axis_video_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_video_V_strb_V_U : component design_1_v_tpg_0_0_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TSTRB,
        vld_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_m_axis_video_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_video_V_user_V_U : component design_1_v_tpg_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TUSER,
        vld_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_m_axis_video_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_user_V_U_apdone_blk);

    regslice_both_m_axis_video_V_last_V_U : component design_1_v_tpg_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TLAST,
        vld_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_m_axis_video_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_last_V_U_apdone_blk);

    regslice_both_m_axis_video_V_id_V_U : component design_1_v_tpg_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TID,
        vld_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_m_axis_video_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_id_V_U_apdone_blk);

    regslice_both_m_axis_video_V_dest_V_U : component design_1_v_tpg_0_0_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TDEST,
        vld_in => grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID,
        ack_in => regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_m_axis_video_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_m_axis_video_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_done <= ap_const_logic_0;
                elsif ((grp_v_tpgHlsDataFlow_fu_405_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_ready <= ap_const_logic_0;
                elsif ((grp_v_tpgHlsDataFlow_fu_405_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_v_tpgHlsDataFlow_fu_405_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_v_tpgHlsDataFlow_fu_405_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_sync_grp_v_tpgHlsDataFlow_fu_405_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_v_tpgHlsDataFlow_fu_405_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_v_tpgHlsDataFlow_fu_405_ap_ready = ap_const_logic_1)) then 
                    grp_v_tpgHlsDataFlow_fu_405_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_new_0_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                if ((icmp_ln503_fu_590_p2 = ap_const_lv1_0)) then 
                    count_new_0_reg_394 <= add_ln502_reg_660;
                elsif ((icmp_ln503_fu_590_p2 = ap_const_lv1_1)) then 
                    count_new_0_reg_394 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ZplateHorContDelta_read_reg_729 <= ZplateHorContDelta;
                ZplateHorContStart_read_reg_724 <= ZplateHorContStart;
                ZplateVerContDelta_read_reg_739 <= ZplateVerContDelta;
                ZplateVerContStart_read_reg_734 <= ZplateVerContStart;
                bckgndId_read_reg_689 <= bckgndId;
                boxSize_read_reg_744 <= boxSize;
                colorFormat_read_reg_709 <= colorFormat;
                crossHairX_read_reg_714 <= crossHairX;
                crossHairY_read_reg_719 <= crossHairY;
                dpYUVCoef_read_reg_764 <= dpYUVCoef;
                empty_103_reg_754 <= empty_103_fu_646_p1;
                empty_104_reg_759 <= empty_104_fu_651_p1;
                empty_reg_749 <= empty_fu_641_p1;
                field_id_read_reg_679 <= field_id;
                height_read_reg_669 <= height;
                maskId_read_reg_699 <= maskId;
                motionSpeed_read_reg_704 <= motionSpeed;
                ovrlayId_read_reg_694 <= ovrlayId;
                width_read_reg_674 <= width;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln502_reg_660 <= add_ln502_fu_584_p2;
                icmp_ln500_reg_656 <= icmp_ln500_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln500_reg_656 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                count <= count_new_0_reg_394;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln503_fu_590_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                s <= select_ln505_fu_621_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln500_fu_574_p2, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state6, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln500_fu_574_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln502_fu_584_p2 <= std_logic_vector(unsigned(count) + unsigned(ap_const_lv32_1));
    add_ln507_fu_615_p2 <= std_logic_vector(unsigned(s) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state5_on_subcall_done)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state5_on_subcall_done_assign_proc : process(ap_sync_grp_v_tpgHlsDataFlow_fu_405_ap_ready, ap_sync_grp_v_tpgHlsDataFlow_fu_405_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((ap_sync_grp_v_tpgHlsDataFlow_fu_405_ap_ready and ap_sync_grp_v_tpgHlsDataFlow_fu_405_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_both_m_axis_video_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_v_tpgHlsDataFlow_fu_405_ap_done <= (grp_v_tpgHlsDataFlow_fu_405_ap_done or ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_done);
    ap_sync_grp_v_tpgHlsDataFlow_fu_405_ap_ready <= (grp_v_tpgHlsDataFlow_fu_405_ap_ready or ap_sync_reg_grp_v_tpgHlsDataFlow_fu_405_ap_ready);
    empty_103_fu_646_p1 <= boxColorG(8 - 1 downto 0);
    empty_104_fu_651_p1 <= boxColorB(8 - 1 downto 0);
    empty_fu_641_p1 <= boxColorR(8 - 1 downto 0);
    fid <= grp_v_tpgHlsDataFlow_fu_405_fid;

    grp_v_tpgHlsDataFlow_fu_405_ap_continue_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_v_tpgHlsDataFlow_fu_405_ap_continue <= ap_const_logic_1;
        else 
            grp_v_tpgHlsDataFlow_fu_405_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_v_tpgHlsDataFlow_fu_405_ap_start <= grp_v_tpgHlsDataFlow_fu_405_ap_start_reg;
    grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TREADY <= (m_axis_video_TREADY_int_regslice and ap_CS_fsm_state5);
    icmp_ln500_fu_574_p2 <= "1" when (grp_reg_unsigned_short_s_fu_568_ap_return = ap_const_lv16_1) else "0";
    icmp_ln503_fu_590_p2 <= "1" when (add_ln502_reg_660 = ap_const_lv32_A) else "0";
    icmp_ln505_fu_609_p2 <= "1" when (signed(tmp_2_fu_599_p4) < signed(ap_const_lv29_1)) else "0";
    m_axis_video_TVALID <= regslice_both_m_axis_video_V_data_V_U_vld_out;
    m_axis_video_TVALID_int_regslice <= grp_v_tpgHlsDataFlow_fu_405_m_axis_video_TVALID;
    select_ln505_fu_621_p3 <= 
        add_ln507_fu_615_p2 when (icmp_ln505_fu_609_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_2_fu_599_p4 <= s(31 downto 3);
end behav;
